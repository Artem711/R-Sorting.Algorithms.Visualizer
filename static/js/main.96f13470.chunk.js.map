{"version":3,"sources":["Shared/Helpers/Functions/index.ts","Redux/slices/base.ts","Shared/Helpers/Algorithms/bubbleSort.ts","Shared/Helpers/Algorithms/heapSort.ts","Shared/Helpers/Algorithms/mergeSort.ts","Shared/Helpers/Algorithms/quickSort.ts","Redux/store.ts","Shared/Layout/Navbar.tsx","Shared/Helpers/Functions/window.ts","Screens/Body.tsx","App.tsx","index.tsx"],"names":["memoComparison","prevProps","nextProps","shallowEqual","context","window","AudioContext","webkitAudioContext","baseSlice","createSlice","name","initialState","algorithm","isRunning","array","sortedArray","swappersArray","bubbleSortArray","heapSortArray","mergeSortArray","quickSortArray","quickSortPivot","reducers","setAlgorithm","state","action","payload","setRunning","setArray","setSortedArray","length","concat","setSwappersArray","console","log","osc","createOscillator","type","value","num","min","max","parsed","parseInt","Math","limitNumberWithinRange","frequency","linearRampToValueAtTime","pow","currentTime","connect","destination","start","stop","setBubbleSortArray","setHeapSortArray","setMergeSortArray","setQuickSortArray","setQuickSortPivot","actions","handleDispatch","toDispatch","dispatch","speed","map","index","setTimeout","dispatchFunction","shift","bubbleSort","stateArray","slice","sorted","round","i","push","temp","siftDown","end","floor","swap","left","right","heapSort","currentIndex","buildMaxHeap","mergeSortHelper","obj","half","first","second","indexHalf","actualFirst","actualSecond","isFinalMerge","indexToPush","forEach","subArr","actualSort","currentToDispatch","mergeSort","idx","quickSortHelper","pivot","Array","quickSort","store","configureStore","reducer","base","baseReducer","Navbar","useSelector","useDispatch","generateArray","random","useEffect","color","cursor","handleAlgorithmSelect","WrapperView","style","onClick","DividerView","className","id","background","disabled","onChange","event","target","selectedAlgorithm","handleSelect","Button","doSort","sort","AlgorithmButton","props","isSelected","styled","div","React","memo","getWindowDimensions","width","innerWidth","height","innerHeight","App","localState","useState","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","numWidth","numMargin","margin","fontSize","number","backgroundColor","includes","BarView","marginLeft","marginRight","Body","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.96f13470.chunk.js","sourcesContent":["import { shallowEqual } from 'react-redux'\n\nexport const memoComparison = (prevProps: any, nextProps: any) => {\n  return shallowEqual(prevProps, nextProps)\n}\n\nexport const limitNumberWithinRange = (\n  num: number,\n  min: number,\n  max: number,\n) => {\n  const parsed = parseInt(num as any)\n  return Math.min(Math.max(parsed, min), max)\n}\n","import { createSlice } from '@reduxjs/toolkit'\nimport { AlgorithmType } from 'Redux/types'\nimport { limitNumberWithinRange } from 'Shared/Helpers/Functions'\n\n// @ts-ignore\nvar context = new (window.AudioContext || window.webkitAudioContext)()\n\nexport const baseSlice = createSlice({\n  name: 'base',\n  initialState: {\n    // General state\n    algorithm: '' as AlgorithmType,\n    isRunning: false,\n    array: [] as Array<number>,\n    sortedArray: [] as Array<number>,\n    swappersArray: [] as Array<number>,\n\n    // Individual algorithms state\n    bubbleSortArray: [] as Array<number>,\n    heapSortArray: [] as Array<number>,\n    mergeSortArray: [] as Array<number>,\n    quickSortArray: [] as Array<number>,\n    quickSortPivot: null,\n  },\n  reducers: {\n    // General reducers\n    setAlgorithm: (state, action: { payload: AlgorithmType }) => {\n      state.algorithm = action.payload\n    },\n\n    setRunning: (state, action: { payload: boolean }) => {\n      state.isRunning = action.payload\n    },\n\n    setArray: (state, action: { payload: Array<number> }) => {\n      state.array = action.payload\n    },\n\n    setSortedArray: (state, action: { payload: Array<number> }) => {\n      if (action.payload.length) {\n        state.sortedArray = state.sortedArray.concat(action.payload)\n      } else {\n        state.sortedArray = []\n      }\n    },\n\n    setSwappersArray: (state, action: { payload: Array<number> }) => {\n      if (action.payload.length) {\n        state.swappersArray = state.swappersArray.concat(action.payload)\n      } else {\n        state.swappersArray = []\n      }\n\n      console.log(action.payload)\n      var osc = context.createOscillator() // instantiate an oscillator\n      osc.type = 'square' // this is the default - also square, sawtooth, triangle\n      const value = limitNumberWithinRange(\n        action.payload[0] * action.payload[0] || 400,\n        -22050,\n        22050,\n      )\n      osc.frequency.value = value\n      osc.frequency.linearRampToValueAtTime(\n        value * Math.pow(2, 1 / 12),\n        context.currentTime + 1,\n      )\n      osc.connect(context.destination) // connect it to the destination\n      osc.start() // start the oscillator\n      osc.stop(context.currentTime + 0.02) // stop 2 seconds after the current time\n    },\n\n    // Individual algorithms reducers\n    setBubbleSortArray: (state, action: { payload: Array<number> }) => {\n      state.bubbleSortArray = action.payload\n    },\n\n    setHeapSortArray: (state, action: { payload: Array<number> }) => {\n      state.heapSortArray = action.payload\n    },\n\n    setMergeSortArray: (state, action: { payload: Array<number> }) => {\n      state.mergeSortArray = action.payload\n    },\n\n    setQuickSortArray: (state, action: { payload: Array<number> }) => {\n      state.quickSortArray = action.payload\n    },\n\n    setQuickSortPivot: (state, action: { payload: any }) => {\n      state.quickSortPivot = action.payload\n    },\n  },\n})\n\n// Action creators are generated for each case reducer function\nexport const actions = baseSlice.actions\nexport default baseSlice.reducer\n","import { actions } from 'Redux/slices/base'\nimport { AppDispatch } from 'Redux/store'\nimport { TwoDArrayOfNumbersOrBooleans } from './index'\n\nfunction bubbleSort(\n  stateArray: Array<number>,\n  dispatch: AppDispatch,\n  speed: number,\n) {\n  let array = stateArray.slice(0),\n    toDispatch = [],\n    sorted = false,\n    round = 0\n  while (!sorted) {\n    sorted = true\n    for (let i = 0; i < array.length - 1 - round; i++) {\n      toDispatch.push([i, i + 1])\n      if (array[i] > array[i + 1]) {\n        toDispatch.push([i, i + 1, true])\n        let temp = array[i]\n        array[i] = array[i + 1]\n        array[i + 1] = temp\n        sorted = false\n        toDispatch.push(array.slice(0))\n        toDispatch.push([])\n      }\n    }\n    toDispatch.push([true, array.length - 1 - round])\n    round++\n  }\n  handleDispatch(toDispatch, dispatch, array, speed)\n  return array\n}\n\nfunction handleDispatch(\n  toDispatch: TwoDArrayOfNumbersOrBooleans,\n  dispatch: AppDispatch,\n  array: Array<number>,\n  speed: number,\n) {\n  if (!toDispatch.length) {\n    dispatch(actions.setBubbleSortArray(array.map((num, index) => index)))\n    setTimeout(() => {\n      dispatch(actions.setBubbleSortArray([]))\n      dispatch(actions.setSortedArray(array.map((num, index) => index)))\n      dispatch(actions.setRunning(false))\n    }, 900)\n    return\n  }\n  let dispatchFunction =\n    toDispatch[0].length > 3\n      ? actions.setArray\n      : toDispatch[0].length === 3 || toDispatch[0].length === 0\n      ? actions.setSwappersArray\n      : toDispatch[0].length === 2 && typeof toDispatch[0][0] === 'boolean'\n      ? actions.setSortedArray\n      : actions.setBubbleSortArray\n  dispatch(dispatchFunction(toDispatch.shift() as any))\n  setTimeout(() => {\n    handleDispatch(toDispatch, dispatch, array, speed)\n  }, speed)\n}\n\nexport default bubbleSort\n","import { actions } from 'Redux/slices/base'\nimport { AppDispatch } from 'Redux/store'\nimport { TwoDArrayOfNumbersOrBooleans } from '.'\n\nfunction heapSort(\n  stateArray: Array<number>,\n  dispatch: AppDispatch,\n  speed: number,\n) {\n  let array = stateArray.slice(0),\n    toDispatch: TwoDArrayOfNumbersOrBooleans = []\n  buildMaxHeap(array, toDispatch)\n  let end = array.length - 1\n  while (end > 0) {\n    toDispatch.push([0, end])\n    let temp = array[end]\n    array[end] = array[0]\n    array[0] = temp\n    toDispatch.push([0, end, true])\n    toDispatch.push(array.slice(0))\n    toDispatch.push([])\n    toDispatch.push([true, end])\n    siftDown(array, 0, end, toDispatch)\n    end--\n  }\n  toDispatch.push([true, end])\n  handleDispatch(toDispatch, dispatch, array, speed)\n  return array\n}\n\nfunction buildMaxHeap(\n  array: Array<number>,\n  toDispatch: TwoDArrayOfNumbersOrBooleans,\n) {\n  let currentIndex = Math.floor(array.length / 2)\n  while (currentIndex >= 0) {\n    siftDown(array, currentIndex, array.length, toDispatch)\n    currentIndex--\n  }\n}\n\nfunction siftDown(\n  array: Array<number>,\n  start: number,\n  end: number,\n  toDispatch: Array<Array<number | boolean>>,\n) {\n  if (start >= Math.floor(end / 2)) {\n    return\n  }\n  let left = start * 2 + 1,\n    right = start * 2 + 2 < end ? start * 2 + 2 : null,\n    swap\n  if (right) {\n    toDispatch.push([start, left, right])\n    swap = array[left] > array[right] ? left : right\n  } else {\n    toDispatch.push([start, left])\n    swap = left\n  }\n  if (array[start] < array[swap]) {\n    let temp = array[swap]\n    array[swap] = array[start]\n    array[start] = temp\n    toDispatch.push([start, swap, true])\n    toDispatch.push(array.slice(0))\n    toDispatch.push([])\n    siftDown(array, swap, end, toDispatch)\n  }\n}\n\nfunction handleDispatch(\n  toDispatch: Array<Array<number | boolean>>,\n  dispatch: AppDispatch,\n  array: Array<number>,\n  speed: number,\n) {\n  if (!toDispatch.length) {\n    dispatch(actions.setHeapSortArray(array.map((num, index) => index)))\n    setTimeout(() => {\n      dispatch(actions.setHeapSortArray([]))\n      dispatch(actions.setRunning(false))\n    }, 900)\n    return\n  }\n  let dispatchFunction =\n    toDispatch[0].length > 3\n      ? actions.setArray\n      : (toDispatch[0].length === 3 && typeof toDispatch[0][2] === 'boolean') ||\n        !toDispatch[0].length\n      ? actions.setSwappersArray\n      : toDispatch[0].length === 2 && typeof toDispatch[0][0] === 'boolean'\n      ? actions.setSortedArray\n      : actions.setHeapSortArray\n  dispatch(dispatchFunction(toDispatch.shift() as any))\n  setTimeout(() => {\n    handleDispatch(toDispatch, dispatch, array, speed)\n  }, speed)\n}\n\nexport default heapSort\n","import { actions } from 'Redux/slices/base'\nimport { AppDispatch } from 'Redux/store'\n\nimport { TwoDArrayOfNumbers } from './index'\n\ntype MergeSortObjType = { array: Array<number> }\nfunction mergeSort(\n  stateArray: Array<number>,\n  dispatch: AppDispatch,\n  speed: number,\n) {\n  let array = stateArray.slice(0),\n    toDispatch: TwoDArrayOfNumbers = []\n  let finalArray = mergeSortHelper(\n    array.map((num, idx) => [num, idx]),\n    toDispatch,\n    0,\n    array.length - 1,\n    { array: array.slice(0) },\n  )\n  handleDispatch(toDispatch, dispatch, finalArray, speed)\n}\n\nfunction mergeSortHelper(\n  array: TwoDArrayOfNumbers,\n  toDispatch: TwoDArrayOfNumbers,\n  start: number,\n  end: number,\n  obj: MergeSortObjType,\n): TwoDArrayOfNumbers {\n  if (array.length === 1) {\n    return array\n  }\n  let half = Math.floor(array.length / 2),\n    first = array.slice(0, half),\n    second = array.slice(half),\n    indexHalf = Math.floor((end + 1 + start) / 2),\n    actualFirst: TwoDArrayOfNumbers = mergeSortHelper(\n      first,\n      toDispatch,\n      start,\n      indexHalf - 1,\n      obj,\n    ),\n    actualSecond: TwoDArrayOfNumbers = mergeSortHelper(\n      second,\n      toDispatch,\n      indexHalf,\n      end,\n      obj,\n    ),\n    isFinalMerge = false\n  if (actualFirst.length + actualSecond.length === obj.array.length)\n    isFinalMerge = true\n  return actualSort(\n    actualFirst,\n    actualSecond,\n    toDispatch,\n    obj,\n    start,\n    end,\n    isFinalMerge,\n  )\n}\n\nfunction actualSort(\n  first: Array<Array<number>>,\n  second: Array<Array<number>>,\n  toDispatch: Array<Array<number | boolean>>,\n  obj: MergeSortObjType,\n  start: number,\n  end: number,\n  isFinalMerge: boolean,\n): TwoDArrayOfNumbers {\n  let sortedArray = []\n  let indexToPush = start\n  while (first.length && second.length) {\n    toDispatch.push([first[0][1], second[0][1]])\n    if (first[0][0] <= second[0][0]) {\n      indexToPush++\n      sortedArray.push(first.shift())\n    } else {\n      toDispatch.push([first[0][1], second[0][1], true])\n      second[0][1] = indexToPush++\n      sortedArray.push(second.shift())\n      first.forEach((subArr) => subArr[1]++)\n      if (start === 0) {\n        obj.array = sortedArray\n          .map((subArr: any) => subArr[0])\n          .concat(first.map((subArr) => subArr[0]))\n          .concat(second.map((subArr) => subArr[0]))\n          .concat(obj.array.slice(end + 1))\n      } else {\n        obj.array = obj.array\n          .slice(0, start)\n          .concat(sortedArray.map((subArr: any) => subArr[0]))\n          .concat(first.map((subArr) => subArr[0]))\n          .concat(second.map((subArr) => subArr[0]))\n          .concat(obj.array.slice(end + 1))\n      }\n      toDispatch.push(obj.array.concat([indexToPush - 1, indexToPush]))\n      toDispatch.push([])\n    }\n    if (isFinalMerge) toDispatch.push([true, indexToPush - 1])\n  }\n  return sortedArray.concat(first).concat(second) as TwoDArrayOfNumbers\n}\n\nfunction handleDispatch(\n  toDispatch: TwoDArrayOfNumbers,\n  dispatch: AppDispatch,\n  array: TwoDArrayOfNumbers,\n  speed: number,\n) {\n  if (!toDispatch.length) {\n    dispatch(actions.setMergeSortArray(array.map((num, index) => index)))\n    setTimeout(() => {\n      dispatch(actions.setMergeSortArray([]))\n      dispatch(actions.setSortedArray(array.map((num, index) => index)))\n      dispatch(actions.setRunning(false))\n    }, 900)\n    return\n  }\n  let dispatchFunction =\n    toDispatch[0].length > 3\n      ? actions.setArray\n      : (toDispatch[0].length === 3 && typeof toDispatch[0][2] === 'boolean') ||\n        toDispatch[0].length === 0\n      ? actions.setSwappersArray\n      : toDispatch[0].length === 2 && typeof toDispatch[0][0] === 'boolean'\n      ? actions.setSortedArray\n      : actions.setMergeSortArray\n  if (dispatchFunction === actions.setArray) {\n    let currentToDispatch = toDispatch.shift()\n    if (currentToDispatch) {\n      dispatch(\n        dispatchFunction(\n          currentToDispatch.slice(0, currentToDispatch.length - 2),\n        ),\n      )\n      dispatch(actions.setSwappersArray([]))\n      dispatch(actions.setMergeSortArray([]))\n      dispatch(\n        actions.setSwappersArray([\n          currentToDispatch[currentToDispatch.length - 2],\n          currentToDispatch[currentToDispatch.length - 1],\n        ]),\n      )\n      dispatch(\n        actions.setMergeSortArray([\n          currentToDispatch[currentToDispatch.length - 2],\n          currentToDispatch[currentToDispatch.length - 1],\n        ]),\n      )\n    }\n  } else {\n    dispatch(dispatchFunction(toDispatch.shift() as any))\n  }\n  setTimeout(() => {\n    handleDispatch(toDispatch, dispatch, array, speed)\n  }, speed)\n}\n\nexport default mergeSort\n","import { actions } from 'Redux/slices/base'\nimport { AppDispatch } from 'Redux/store'\n\ntype LocalCustom2DArrayOfNumbersOrBooleans = Array<\n  Array<boolean | number> | number\n>\n\nfunction quickSort(\n  stateArray: Array<number>,\n  dispatch: AppDispatch,\n  speed: number,\n) {\n  let array = stateArray.slice(0),\n    toDispatch: LocalCustom2DArrayOfNumbersOrBooleans = []\n  quickSortHelper(array, 0, array.length - 1, toDispatch)\n  handleDispatch(toDispatch, dispatch, array, speed)\n  return array\n}\n\nfunction quickSortHelper(\n  array: Array<number>,\n  start: number,\n  end: number,\n  toDispatch: LocalCustom2DArrayOfNumbersOrBooleans,\n) {\n  if (start >= end) {\n    toDispatch.push([true, start])\n    return\n  }\n  let pivot = start,\n    left = start + 1,\n    right = end\n  toDispatch.push(pivot)\n  toDispatch.push([left, right])\n  while (right >= left) {\n    if (array[right] < array[pivot] && array[left] > array[pivot]) {\n      toDispatch.push([left, right, true])\n      let temp = array[right]\n      array[right] = array[left]\n      array[left] = temp\n      toDispatch.push(array.slice(0))\n      toDispatch.push([])\n    }\n    if (array[right] >= array[pivot]) {\n      right--\n    }\n    if (array[left] <= array[pivot]) {\n      left++\n    }\n    if (right >= left) toDispatch.push([left, right])\n  }\n  toDispatch.push([pivot, right])\n  if (pivot !== right) {\n    let temp = array[right]\n    array[right] = array[pivot]\n    array[pivot] = temp\n    toDispatch.push([pivot, right, true])\n    toDispatch.push(array.slice(0))\n    toDispatch.push([])\n    toDispatch.push([true, right])\n  }\n  quickSortHelper(array, start, right - 1, toDispatch)\n  quickSortHelper(array, right + 1, end, toDispatch)\n}\n\nfunction handleDispatch(\n  toDispatch: LocalCustom2DArrayOfNumbersOrBooleans,\n  dispatch: AppDispatch,\n  array: Array<number>,\n  speed: number,\n) {\n  if (!toDispatch.length) {\n    dispatch(actions.setQuickSortPivot(null))\n    dispatch(actions.setQuickSortArray(array.map((num, index) => index)))\n    setTimeout(() => {\n      dispatch(actions.setQuickSortArray([]))\n      dispatch(actions.setRunning(false))\n    }, 900)\n    return\n  }\n  let dispatchFunction = !(toDispatch[0] instanceof Array)\n    ? actions.setQuickSortPivot\n    : toDispatch[0].length > 3\n    ? actions.setArray\n    : toDispatch[0].length !== 2\n    ? actions.setSwappersArray\n    : toDispatch[0].length === 2 && typeof toDispatch[0][0] === 'boolean'\n    ? actions.setSortedArray\n    : actions.setQuickSortArray\n  dispatch(dispatchFunction(toDispatch.shift() as any))\n  if (dispatchFunction === actions.setQuickSortPivot)\n    dispatch(actions.setQuickSortArray(toDispatch.shift() as any))\n  setTimeout(() => {\n    handleDispatch(toDispatch, dispatch, array, speed)\n  }, speed)\n}\n\nexport default quickSort\n","import { configureStore } from '@reduxjs/toolkit'\nimport { useDispatch } from 'react-redux'\n\nimport baseReducer from 'Redux/slices/base'\n\nexport const store = configureStore({\n  reducer: {\n    base: baseReducer,\n  },\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\n","// PLUGINS IMPORTS //\nimport React, { useEffect } from 'react'\nimport styled from 'styled-components'\nimport { useSelector } from 'react-redux'\n\n// COMPONENTS IMPORTS //\nimport { memoComparison } from 'Shared/Helpers/Functions'\n\n// EXTRA IMPORTS //\nimport {\n  bubbleSort,\n  quickSort,\n  heapSort,\n  mergeSort,\n} from 'Shared/Helpers/Algorithms'\n\n// REDUX IMPORTS //\nimport { actions } from 'Redux/slices/base'\nimport { RootState, useAppDispatch } from 'Redux/store'\nimport { AlgorithmType } from 'Redux/types'\n\n/////////////////////////////////////////////////////////////////////////////\n\ntype PropsType = {}\n\nconst Navbar: React.FC<PropsType> = () => {\n  const { array, isRunning, algorithm } = useSelector(\n    (state: RootState) => state.base,\n  )\n  const dispatch = useAppDispatch()\n\n  const generateArray = (length: number) => {\n    let array = []\n    while (array.length < length) {\n      array.push(Math.floor(Math.random() * 200) + 10)\n    }\n    dispatch(actions.setArray(array))\n    dispatch(actions.setSortedArray([]))\n  }\n\n  const sort = (\n    algorithm: AlgorithmType,\n    array: Array<number>,\n    speed: number,\n  ) => {\n    let doSort =\n      algorithm === 'Bubble Sort'\n        ? bubbleSort\n        : algorithm === 'Quick Sort'\n        ? quickSort\n        : algorithm === 'Heap Sort'\n        ? heapSort\n        : algorithm === 'Merge Sort'\n        ? mergeSort\n        : null\n\n    dispatch(actions.setSortedArray([]))\n    dispatch(actions.setRunning(true))\n    if (doSort !== null) {\n      doSort(array, dispatch, speed)\n    }\n  }\n\n  useEffect(() => {\n    generateArray(87)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const speed =\n    570 - Math.pow(array.length, 2) > 0 ? 570 - Math.pow(array.length, 2) : 0\n  const color = isRunning ? 'rgba(214, 29, 29, 0.8)' : 'white'\n  const cursor = isRunning ? 'auto' : 'pointer'\n\n  const handleChangeScroller = (event: React.ChangeEvent<HTMLInputElement>) => {\n    generateArray(Math.floor((parseInt(event.target.value) + 3) * 1.65))\n  }\n\n  const handleAlgorithmSelect = (algorithm: AlgorithmType) => {\n    dispatch(actions.setAlgorithm(algorithm))\n  }\n\n  const algorithms: Array<AlgorithmType> = [\n    'Merge Sort',\n    'Quick Sort',\n    'Heap Sort',\n    'Bubble Sort',\n  ]\n  return (\n    <WrapperView>\n      <div\n        style={{ color: color, cursor: cursor }}\n        onClick={!isRunning ? () => generateArray(array.length) : () => {}}\n      >\n        Generate New Array\n      </div>\n      <DividerView className='separator'></DividerView>\n      <div style={{ color: color }}>Change Array Size & Sorting Speed</div>\n      <input\n        id='changeSize'\n        type='range'\n        min='0'\n        max='100'\n        style={{ background: color, cursor: cursor }}\n        disabled={isRunning}\n        onChange={handleChangeScroller}\n      />\n      <DividerView className='separator'></DividerView>\n      {/* Algorithm Buttons */}\n      {algorithms.map((value, idx) => {\n        return (\n          <AlgorithmButton\n            key={idx}\n            selectedAlgorithm={algorithm}\n            algorithm={value}\n            handleSelect={handleAlgorithmSelect}\n            disabled={isRunning}\n          />\n        )\n      })}\n      <DividerView />\n      <Button\n        color={algorithm.length > 0 ? color : 'gray'}\n        onClick={\n          algorithm\n            ? !isRunning\n              ? () => sort(algorithm, array, speed)\n              : () => {}\n            : () => {}\n        }\n      >\n        Sort!\n      </Button>\n    </WrapperView>\n  )\n}\n\nconst AlgorithmButton = (props: {\n  selectedAlgorithm: string\n  algorithm: AlgorithmType\n  handleSelect: (newAlgorithm: AlgorithmType) => void\n  disabled: boolean\n}) => {\n  const isSelected = props.selectedAlgorithm === props.algorithm\n\n  const onClick = () => {\n    if (props.disabled) {\n      return () => {}\n    } else {\n      return props.handleSelect(props.algorithm)\n    }\n  }\n\n  return (\n    <Button color={isSelected ? 'blue' : 'red'} onClick={onClick}>\n      {props.algorithm}\n    </Button>\n  )\n}\n\n// Styles\nconst WrapperView = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-around;\n  background: black;\n`\nconst DividerView = styled.div`\n  width: 2px;\n  height: 55px;\n  background-color: gray;\n  margin-left: 15px;\n  margin-right: 15px;\n  display: inline-block;\n`\n\nconst Button = styled.div`\n  color: ${(props: { color: string }) => props.color};\n  font-size: 16px;\n  font-family: monospace;\n  display: inline-block;\n  margin-left: 25px;\n  margin-right: 15px;\n  cursor: pointer;\n`\n\nexport default React.memo(Navbar, memoComparison)\n","export const getWindowDimensions = () => {\n  const { innerWidth: width, innerHeight: height } = window\n  return {\n    width,\n    height,\n  }\n}\n","// PLUGINS IMPORTS //\nimport React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { useSelector } from 'react-redux'\n\n// COMPONENTS IMPORTS //\nimport { memoComparison } from 'Shared/Helpers/Functions'\n\n// EXTRA IMPORTS //\nimport { RootState } from 'Redux/store'\nimport { getWindowDimensions } from 'Shared/Helpers/Functions/window'\n\n/////////////////////////////////////////////////////////////////////////////\n\ntype PropsType = {}\n\nconst App: React.FC<PropsType> = () => {\n  const localState = useSelector((state: RootState) => state.base)\n\n  const [windowDimensions, setWindowDimensions] = useState(\n    getWindowDimensions(),\n  )\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions())\n    }\n\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [])\n\n  const numWidth = Math.floor(\n    windowDimensions.width / (localState.array.length * 3),\n  )\n  const width = `${numWidth}px`\n  const numMargin =\n    localState.array.length < 5\n      ? 10\n      : localState.array.length < 8\n      ? 8\n      : localState.array.length < 11\n      ? 6\n      : localState.array.length < 20\n      ? 4\n      : localState.array.length < 50\n      ? 3.5\n      : localState.array.length < 100\n      ? 3\n      : localState.array.length < 130\n      ? 2.5\n      : 2\n  const margin = `${numMargin}px`\n  const color = numWidth > 20 ? 'white' : 'transparent'\n  const numFont =\n    numWidth > 70\n      ? 20\n      : numWidth > 60\n      ? 18\n      : numWidth > 50\n      ? 16\n      : numWidth > 40\n      ? 14\n      : numWidth > 30\n      ? 12\n      : numWidth > 20\n      ? 10\n      : 8\n  const fontSize = `${numFont}px`\n\n  return (\n    <WrapperView>\n      {localState.array.length\n        ? localState.array.map((number, index) => {\n            const backgroundColor = localState.swappersArray.includes(index)\n              ? 'rgba(219, 57, 57, 0.8)'\n              : localState.bubbleSortArray.includes(index) ||\n                localState.quickSortArray.includes(index) ||\n                localState.heapSortArray.includes(index) ||\n                localState.mergeSortArray.includes(index)\n              ? 'rgba(78, 216, 96, 0.8)'\n              : localState.quickSortPivot === index\n              ? 'rgba(237, 234, 59, 0.8)'\n              : localState.sortedArray.includes(index)\n              ? 'rgba(169, 92, 232, 0.8)'\n              : 'rgba(66, 134, 244, 0.8)'\n            return (\n              <BarView\n                key={index}\n                style={{\n                  height: `${number * 3}px`,\n                  width: width,\n                  marginLeft: margin,\n                  marginRight: margin,\n                  backgroundColor: backgroundColor,\n                  color: color,\n                  fontSize: fontSize,\n                }}\n              >\n                {number}\n              </BarView>\n            )\n          })\n        : null}\n    </WrapperView>\n  )\n}\n\n// Styles\nconst WrapperView = styled.div`\n  width: 100%;\n  height: 100%;\n  background-color: rgb(230, 230, 230);\n  text-align: center;\n`\nconst BarView = styled.div`\n  padding-top: 7px;\n  font-family: sans-serif;\n  font-weight: 700;\n  display: inline-block;\n`\n\nexport default React.memo(App, memoComparison)\n","// PLUGINS IMPORTS //\nimport React from 'react'\n\n// COMPONENTS IMPORTS //\nimport Navbar from 'Shared/Layout/Navbar'\nimport Body from 'Screens/Body'\n\n// EXTRA IMPORTS //\nimport { memoComparison } from 'Shared/Helpers/Functions'\n\n/////////////////////////////////////////////////////////////////////////////\n\ntype PropsType = {}\n\nconst App: React.FC<PropsType> = () => {\n  return (\n    <>\n      <Navbar />\n      <Body />\n    </>\n  )\n}\n\nexport default React.memo(App, memoComparison)\n","// PLUGINS IMPORTS //\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\n// COMPONENTS IMPORTS //\nimport App from './App'\n\n// EXTRA IMPORTS //\n\n// REDUX IMPORTS //\nimport { Provider } from 'react-redux'\nimport { store } from 'Redux/store'\n\n/////////////////////////////////////////////////////////////////////////////\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}